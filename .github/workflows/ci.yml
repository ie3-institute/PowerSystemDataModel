# Â© 2025. TU Dortmund University,
# Institute of Energy Systems, Energy Efficiency and Energy Economics,
# Research group Distribution grid planning and operation
#

name: CI

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches:
      - main
      - dev
      - 'hotfix/*'
      - 'rel/*'
      - 'dependabot/*'
  pull_request:
    branches:
      - main
      - dev

jobs:
  buildAndTest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Check Branch
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi

          if [[ "$BRANCH_NAME" == refs/heads/* ]]; then
            BRANCH_NAME="${BRANCH_NAME#refs/heads/}"
          fi
          
          export BRANCH_NAME
          
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          ./gradlew checkBranchName -PbranchName="$BRANCH_NAME" --warning-mode=none
          
          bash scripts/branch_type.sh

      - name: Version Check
        if: ${{ github.event_name == 'pull_request' }}
        env:
          BASE_BRANCH: ${{ github.event.pull_request.base.ref }}
        run: bash scripts/run-version-check.sh

      - name: Build Project
        run: ./gradlew --refresh-dependencies clean assemble spotlessCheck

      - name: Run Tests
        run: ./gradlew pmdMain pmdTest spotbugsMain spotbugsTest test jacocoTestReport jacocoTestCoverageVerification

      - name: Build Java-Docs
        run: ./gradlew javadoc

      - name: SonarQube
        run: |
          ./gradlew sonar \
          -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }} \
          -Dsonar.host.url=${{ vars.SONAR_HOST_URL }} \
          -Dsonar.token="${{ secrets.SONAR_TOKEN }}" \
          -Dsonar.qualitygate.wait=true

        # Copy JAR files from libs to staging-deploy
      - name: Copy JAR Files to Staging Directory
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        run: |
          echo "Listing directories in build..."
          ls -d build/*/
    
          echo "Listing JAR files in build/libs..."
          ls build/libs/*.jar || echo "No JAR files found in build/libs."
    
          echo "Copying JAR files from build/libs to build/staging-deploy..."
          mkdir -p build/staging-deploy
          cp build/libs/*.jar build/staging-deploy/ || echo "No JAR files found in build/libs."
          
          echo "Listing JAR files in build/staging-deploy..."
          ls build/staging-deploy/*.jar || echo "No JAR files found in build/staging-deploy."

    #Deployment to Maven Central
      - name: Deploy to Maven Central
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        env:
          ORG_GRADLE_PROJECT_publicKey: ${{ secrets.MAVENCENTRAL_PUBLICKEY }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVENCENTRAL_SIGNINGKEY }}
          ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.MAVENCENTRAL_SIGNINGKEYID }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVENCENTRAL_SIGNINGPASS }}
          ORG_GRADLE_PROJECT_user: ${{ secrets.MAVENCENTRAL_USER }}
          ORG_GRADLE_PROJECT_password: ${{ secrets.MAVENCENTRAL_PASS }}
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            currentVersion=$(./gradlew -q currentVersion)
          else
            currentVersion=$(./gradlew -q devVersion)
          fi
          
          echo "currentVersion=$currentVersion"

          ./gradlew deployToMavenCentral -PdeployVersion=$currentVersion
          
      # List files in staging directory
      - name: List Staging Directory Files
        run: ./gradlew listStagingFiles

      # List JAR files in staging-deploy again
      - name: Copy JAR Files to Staging Directory again
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
        run: |
         echo "Listing directories in build..."
         ls -d build/*/
             
         echo "Listing JAR files in build/libs..."
         ls build/libs/*.jar || echo "No JAR files found in build/libs."
                  
         echo "Listing JAR files in build/staging-deploy..."
         ls build/staging-deploy/*.jar || echo "No JAR files found in build/staging-deploy."