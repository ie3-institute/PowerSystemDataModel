@startuml

note "Assuming all classes to implement \nthe abstract methods of their interfaces\n\n" as generalNotes

interface Publisher

interface DataConnector {
{static}{abstract}DataConnector buildConnector(String json)
{abstract}Boolean validateConnection()
}

interface Neo4JDataConnector {
- neo4jDriver driver
+ Session getSession()
+ Object runStatement(String query)
}
Neo4JDataConnector 	--|> DataConnector

interface JDBCDataConnector {
- DriverManager driverManager
+ Connection getConnection()
+ ResultSet runStatement(String query)
}
JDBCDataConnector 	--|> DataConnector

interface CSVDataConnector {
- Path path
}
CSVDataConnector 	--|> DataConnector

interface DataSource {
- DataConnector connector
}

interface GridDataSource {
{abstract}Future<GridData> fetchGridData()
{abstract}Future<List<NodeModel>> fetchNodes()
{abstract}Future<List<LineModel>> fetchLines()
}
GridDataSource 	--|> DataSource

class Neo4JGridDataSource {
}
Neo4JGridDataSource --|> GridDataSource
Neo4JGridDataSource -->  Neo4JDataConnector

class JDBCGridDataSource {
}
JDBCGridDataSource --|> GridDataSource
JDBCGridDataSource -->  JDBCDataConnector

class CSVGridDataSource {
}
CSVGridDataSource --|> GridDataSource
CSVGridDataSource -->  CSVDataConnector

interface AssetDataSource {
{abstract}Future<AssetData> fetchAssetData()
{abstract}Future<List<EVModel>> fetchEvs()
{abstract}Future<List<WECModel>> fetchWecs()
{abstract}Future<List<...>> fetch...()
}
AssetDataSource 	--|> DataSource

interface TypeDataSource {
{abstract}Future<TypeData> fetchTypeData()
{abstract}Future<List<EVTypeModel>> fetchEvTypes()
{abstract}Future<List<...>> fetch...()
}
TypeDataSource 	--|> DataSource

interface GraphicDataSource {
{abstract}Future<GraphicData> fetchGraphicData()
{abstract}Future<List<...>> fetch...()
}
GraphicDataSource 	--|> DataSource

interface WeatherDataSource {
{abstract}Future<WeatherData> fetchWeatherData()
{abstract}Future<WeatherModel> getWeather(Date, Coordinate)
{abstract}Boolean subscribeToWeatherEvents(ActorRef)
}
WeatherDataSource 	--|> DataSource
WeatherDataSource 	--|> Publisher

interface WholesaleDataSource {
{abstract}Future<WholesaleData> fetchWholesaleData()
{abstract}Future<Double> getWholesale(Date)
{abstract}Boolean subscribeToWholesaleEvents(ActorRef)
}
WholesaleDataSource 	--|> DataSource
WholesaleDataSource 	--|> Publisher

Class InputAccumulator {
+ InputAccumulator InputAccumulator(SimulationModelConfig)
+ Future<SimulationModel> importSimulationModel()
+ SimulationModel getSimulationModel()
}
InputAccumulator --> GridDataSource
InputAccumulator --> AssetDataSource
InputAccumulator --> TypeDataSource
InputAccumulator --> GraphicDataSource
InputAccumulator --> WeatherDataSource
InputAccumulator --> WholesaleDataSource
InputAccumulator --> SimulationModel

Class SimulationModel {
+ List<GridData> gridData
+ List<AssetData> assetData
+ List<...Data> ...Data
+ WeatherDataSource weatherProvider
+ WholesaleDataSource wholesaleProvider
}

Class MainController {
+ SimulationModel loadSimulationModel()
}
MainController --> InputAccumulator
MainController --> SimulationModel




@enduml