@startuml
note "For better readability no getters are shown in the classes. Also the final attributes are not marked especially." as generalNote

package io.extractor {
    interface NestedEntity

    interface HasNodes {
        + allNodes(): List<NodeInput>
    }
    HasNodes --|> NestedEntity

    interface HasThermalBus {
        + getThermalBus(): ThermalBusInput
    }
    HasThermalBus --|> NestedEntity

    interface HasThermalStorage {
        + getThermalStorage(): ThermalStorageInput
    }
    HasThermalStorage --|> NestedEntity

    interface HasType {
        + getType(): AssetTypeInput
    }
    HasType --|> NestedEntity

    interface HasLine {
        + getLine(): LineInput
    }
    HasLine --|> NestedEntity
}

package models {
    interface StandardLoadProfile {
        + getKey: String
        + enum DefaultLoadProfiles
        + {static} parse(String): StandardLoadProfile
    }

    enum BdewLoadProfile {
        - key: String
        + {static} get(String): BdewLoadProfile
    }
    BdewLoadProfile ..|> StandardLoadProfile

    abstract class UniqueEntity {
        + {static} UUID_FIELD_NAME: String
        - uuid: UUID
    }

    class OperationTime {
        cf. other uml diagram for details
    }

    interface Operable {
        cf. other uml diagram for details
    }
    Operable --|> NestedEntity

    package result {}
    package timeseries {}
    package value {}
    note "Has also children in these packages.\ncf. separate uml diagrams" as childNote
    UniqueEntity .. childNote
    childNote .. result
    childNote .. timeseries
    childNote .. value
    childNote .. connector
    childNote .. graphics
    childNote .. thermal

    package input {
        abstract class InputEntity
        InputEntity --|> UniqueEntity

        class OperatorInput {
            + {static} NO_OPERATOR_ASSIGNED: OperatorInput
            - name: String
        }
        OperatorInput --|> InputEntity

        package graphics {}

        abstract class AssetInput {
            - id: String
            - operationTime: OperationTime
            - operator: OperatorInput
        }
        AssetInput --|> InputEntity
        AssetInput ..|> Operable
        AssetInput *-- OperationTime
        AssetInput *-- OperatorInput

        class NodeInput {
            cf. other uml diagram for details
        }

        abstract class AssetTypeInput {
            - id: String
        }
        AssetTypeInput --|> InputEntity

        package connector {}

        package thermal {
            class ThermalBusInput {
                cf. other uml diagram for details
            }
            class ThermalStorageInput {
                cf. other uml diagram for details
            }
        }

        package system {
            package characteristic {}

            package type {
                abstract class SystemParticipantTypeInput {
                    - capex: ComparableQuantity<Currency> [€]
                    - opex: ComparableQuantity<EnergyPrice> [€/MWh]
                    - sRated: ComparableQuantity<Power> [kVA]
                    - cosPhiRated: Double
                }
                SystemParticipantTypeInput --|> AssetTypeInput

                class BmTypeInput {
                    - etaConv: ComparableQuantity<Dimensionless> [%]
                    - activePowerGradient: ComparableQuantity<DimensionlessRate> [%/h]
                }
                BmTypeInput --|> SystemParticipantTypeInput

                class ChpTypeInput {
                    - etaEl: ComparableQuantity<Dimensionless> [%]
                    - etaTh: ComparableQuantity<Dimensionless> [%]
                    - pThermal: ComparableQuantity<Power> [kW]
                    - pOwn: ComparableQuantity<Power> [kW]
                }
                ChpTypeInput --|> SystemParticipantTypeInput

                class EvTypeInput {
                    - eStorage: ComparableQuantity<Energy> [kWh]
                    - eCons: ComparableQuantity<SpecificEnergy> [kWh/km]
                }
                EvTypeInput --|> SystemParticipantTypeInput

                class HpTypeInput {
                    - pThermal: ComparableQuantity<Power> [kW]
                }
                HpTypeInput --|> SystemParticipantTypeInput

                class StorageTypeInput {
                    - eStorage: ComparableQuantity<Energy> [kWh]
                    - pMax: ComparableQuantity<Power> [kW]
                    - activePowerGradient: ComparableQuantity<DimensionlessRate> [%/h]
                    - eta: ComparableQuantity<Dimensionless> [%]
                }
                StorageTypeInput --|> SystemParticipantTypeInput

                class WecTypeInput {
                    - cpCharacteristic: WecCharacteristicInput
                    - etaConv: ComparableQuantity<Dimensionless> [%]
                    - rotorArea: ComparableQuantity<Area> [m²]
                    - hubHeight: ComparableQuantity<Length> [m]
                }
                WecTypeInput --|> SystemParticipantTypeInput
            }

            abstract class SystemParticipantInput {
                - node: NodeInput
                - qCharacteristics: ReactivePowerCharacteristicInput
            }
            SystemParticipantInput --|> AssetInput
            SystemParticipantInput ..|> HasNodes
            SystemParticipantInput ..|> NodeInput

            class BmInput {
                - type: BmTypeInput
                - marketReaction: Boolean
                - costControlled: Boolean
                - feedInTariff: ComparableQuantity<SpecificCurrency> [€/MWh]
            }
            BmInput --|> SystemParticipantInput
            BmInput ..|> HasType

            class ChpInput {
                - thermalBus: ThermalBusInput
                - type: ChpTypeInput
                - thermalStorage: ThermalStorageInput
                - marketReaction: Boolean
            }
            ChpInput --|> SystemParticipantInput
            ChpInput ..|> HasThermalBus
            ChpInput ..|> HasType
            ChpInput ..|> HasThermalStorage
            ChpInput *-- ThermalBusInput
            ChpInput *-- ThermalStorageInput

            class EvInput {
                - type: EvTypeInput
            }
            EvInput --|> SystemParticipantInput
            EvInput ..|> HasType

            class FixedFeedInInput {
                - sRated: ComparableQuantity<Power> [kVA]
                - cosPhiRated: double
            }
            FixedFeedInInput --|> SystemParticipantInput

            class HpInput {
                - type: HpTypeInput
                - thermalBus: ThermalBusInput
            }
            HpInput --|> SystemParticipantInput
            HpInput ..|> HasType
            HpInput ..|> HasThermalBus
            ChpInput *-- ThermalBusInput

            class LoadInput {
                - standardLoadProfile: StandardLoadProfile
                - dsm: Boolean
                - sRated: ComparableQuantity<Power> [kVA]
                - eConsAnnual: ComparableQuantity<Energy> [kWh]
                - cosPhiRated: double
            }
            LoadInput --|> SystemParticipantInput
            LoadInput *-- StandardLoadProfile

            class PvInput {
                - albedo: Double
                - azimuth: ComparableQuantity<Angle> [°]
                - etaConv: ComparableQuantity<Dimensionless> [%]
                - elevationAngle: ComparableQuantity<Angle> [°]
                - kG: Double
                - kT: Double
                - marketReaction: Boolean
                - sRated: ComparableQuantity<Power> [kVA]
                - cosPhiRated: double
            }
            PvInput --|> SystemParticipantInput

            class StorageInput {
                - type: StorageTypeInput
                - behaviour: StorageStrategy
            }
            StorageInput --|> SystemParticipantInput
            StorageInput ..|> HasType

            class WecInput{
                - type: WecTypeInput
                - marketReaction: boolean
            }
            WecInput --|> SystemParticipantInput
            WecInput ..|> HasType
        }
    }
}

@enduml