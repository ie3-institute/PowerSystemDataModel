@startuml

note "Assuming all classes to implement \nthe abstract methods of their interfaces\n\n" as generalNotes

abstract class WeatherSource {
    - TimeBasedWeatherValueFactory weatherFactory
    - Map<Point, IndividualTimeSeries<WeatherValue>> coordinateToTimeSeries
    - IdCoordinateSource idCoordinateSource
    - {abstract} Map<Point, IndividualTimeSeries<WeatherValue>> getWeather(ClosedInterval<ZonedDateTime>)
    - {abstract} Map<Point, IndividualTimeSeries<WeatherValue>> getWeather(ClosedInterval<ZonedDateTime>, Collection<Point>)
    - {abstract} Optional<TimeBasedValue<WeatherValue>> getWeather(ZonedDateTime, Point)
}

WeatherSource <|-- CsvWeatherSource
WeatherSource <|-- SqlWeatherSource
WeatherSource <|-- InfluxDbWeatherSource
WeatherSource <|-- CouchbaseWeatherSource

class CsvWeatherSource {
    - CsvDataSource dataSource
    - CsvWeatherSource(String, String, FileNamingStrategy, IdCoordinateSource, TimeBasedWeatherValueFactory)
}
class SqlWeatherSource {
    - SqlDataSource dataSource
    - String factoryCoordinateFieldName
    - SqlWeatherSource(SqlConnector, IdCoordinateSource, String, String, TimeBasedWeatherValueFactory)
}
class InfluxDbWeatherSource {
    - InfluxDbConnector connector
    - InfluxDbWeatherSource(InfluxDbConnector, IdCoordinateSource, TimeBasedWeatherValueFactory)
    - IndividualTimeSeries<WeatherValue> getWeather(ClosedInterval<ZonedDateTime>, Point)
}
class CouchbaseWeatherSource {
    - CouchbaseConnector connector,
    - CouchbaseWeatherSource(CouchbaseConnector, IdCoordinateSource, String, TimeBasedWeatherValueFactory, String)
    - CouchbaseWeatherSource(CouchbaseConnector, IdCoordinateSource, String, String, TimeBasedWeatherValueFactory, String)
    - String generateWeatherKey(ZonedDateTime, Integer)
    - String createQueryStringForIntervalAndCoordinate(ClosedInterval<ZonedDateTime>, int)
}

interface IdCoordinateSource {
    {abstract} Optional<Point> getCoordinate(int)
    {abstract} Collection<Point> getCoordinates(int...)
    {abstract} Optional<Integer> getId(Point)
    {abstract} Collection<Point> getAllCoordinates()
    {abstract} List<CoordinateDistance> getNearestCoordinates(Point, int)
    {abstract} List<CoordinateDistance> getClosestCoordinates(Point, int, ComparableQuantity<Length>)
}

IdCoordinateSource <|.. CsvIdCoordinateSource
IdCoordinateSource <|.. SqlIdCoordinateSource

class CsvIdCoordinateSource {
    - Map<Integer, Point> idToCoordinate
    - Map<Point, Integer> coordinateToId
    - CsvDataSource dataSource
    - IdCoordinateFactory factory
    - CsvIdCoordinateSource(IdCoordinateFactory, CsvDataSource)
}

class SqlIdCoordinateSource {
    - SqlDataSource dataSource
    - SqlIdCoordinateFactory factory
    - SqlIdCoordinateSource(SqlIdCoordinateFactory, String, SqlDataSource)
}

@enduml