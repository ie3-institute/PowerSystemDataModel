@startuml

note "Assuming all classes to implement \nthe abstract methods of their interfaces\n\n" as generalNotes

interface DataSource {
    {abstract} Stream<Map<String, String>> getSourceData(Class<? extends UniqueEntity> entityClass)
}

DataSource <|-- CsvDataSource
DataSource <|-- SqlDataSource

' Implementations

class CsvDataSource {
    - String csvSep
    # CsvFileConnector connector
    + CsvDataSource(String, String, FileNamingStrategy)
}

class SqlDataSource {
    - String schemaName
    # SqlConnector connector
    # DatabaseNamingStrategy databaseNamingStrategy
    + SqlDataSource(String, String, DatabaseNamingStrategy)
}

abstract class WeatherSource {
    - TimeBasedWeatherValueFactory weatherFactory
    - Map<Point, IndividualTimeSeries<WeatherValue>> coordinateToTimeSeries
    - IdCoordinateSource idCoordinateSource
    - {abstract} Map<Point, IndividualTimeSeries<WeatherValue>> getWeather(ClosedInterval<ZonedDateTime>)
    - {abstract} Map<Point, IndividualTimeSeries<WeatherValue>> getWeather(ClosedInterval<ZonedDateTime>, Collection<Point>)
    - {abstract} Optional<TimeBasedValue<WeatherValue>> getWeather(ZonedDateTime, Point)
}

WeatherSource <|-- CsvWeatherSource
WeatherSource <|-- SqlWeatherSource
WeatherSource <|-- InfluxDbWeatherSource
WeatherSource <|-- CouchbaseWeatherSource

class CsvWeatherSource {
    - CsvDataSource dataSource
    - CsvWeatherSource(String, String, FileNamingStrategy, IdCoordinateSource, TimeBasedWeatherValueFactory)
}
class SqlWeatherSource {
    - SqlDataSource dataSource
    - String factoryCoordinateFieldName
    - SqlWeatherSource(SqlConnector, IdCoordinateSource, String, String, TimeBasedWeatherValueFactory)
}
class InfluxDbWeatherSource {
    - InfluxDbConnector connector
    - InfluxDbWeatherSource(InfluxDbConnector, IdCoordinateSource, TimeBasedWeatherValueFactory)
    - IndividualTimeSeries<WeatherValue> getWeather(ClosedInterval<ZonedDateTime>, Point)
}
class CouchbaseWeatherSource {
    - CouchbaseConnector connector,
    - CouchbaseWeatherSource(CouchbaseConnector, IdCoordinateSource, String, TimeBasedWeatherValueFactory, String)
    - CouchbaseWeatherSource(CouchbaseConnector, IdCoordinateSource, String, String, TimeBasedWeatherValueFactory, String)
    - String generateWeatherKey(ZonedDateTime, Integer)
    - String createQueryStringForIntervalAndCoordinate(ClosedInterval<ZonedDateTime>, int)
}

abstract class TimeSeriesMappingSource {
    - Map<UUID, UUID> getMapping()
    - Optional<UUID> getTimeSeriesUuid(UUID)
    {abstract} Stream<Map<String, String>> getMappingSourceData()
}

TimeSeriesMappingSource <|-- CsvTimeSeriesMappingSource
TimeSeriesMappingSource <|-- SqlTimeSeriesMappingSource

class CsvTimeSeriesMappingSource {
    - CsvDataSource dataSource
    - CsvTimeSeriesMappingSource(String, String, FileNamingStrategy)
}

class SqlTimeSeriesMappingSource {
    - EntityPersistenceNamingStrategy entityPersistenceNamingStrategy
    - SqlDataSource dataSource
    - SqlTimeSeriesMappingSource(SqlConnector, String, EntityPersistenceNamingStrategy)
}

interface TimeSeriesSource<V extends Value> {
    {abstract} IndividualTimeSeries<V> getTimeSeries()
    {abstract} IndividualTimeSeries<V> getTimeSeries(ClosedInterval<ZonedDateTime>))
    {abstract} Optional<V> getValue(ZonedDateTime)
}

TimeSeriesSource <|-- CsvTimeSeriesSource
TimeSeriesSource <|-- SqlTimeSeriesSource

class CsvTimeSeriesSource<V extends Value> {
    - IndividualTimeSeries<V> timeSeries
    - CsvDataSource dataSource
    + {static} CsvTimeSeriesSource<? extends Value> getSource(\n\tString,\n\tString,\n\tEntityPersistenceNamingStrategy,\n\tCsvFileConnector.CsvIndividualTimeSeriesMetaInformation)
    - CsvTimeSeriesSource(\n\tString,\n\tString,\n\tFileNamingStrategy,\n\tUUID,\n\tString,\n\tClass<V>,\n\tTimeBasedSimpleValueFactory<V>)
}

class SqlTimeSeriesSource<V extends Value> {
    - SqlDataSource dataSource
    - UUID timeSeriesUuid
    - Class<V> valueClass
    - TimeBasedSimpleValueFactory<V> valueFactory
    - SqlTimeSeriesSource(SqlDataSource, UUID, Class<V>, TimeBasedSimpleValueFactory<V>)
    - SqlTimeSeriesSource(SqlConnector, String, DatabaseNamingStrategy, UUID, Class<V>, TimeBasedSimpleValueFactory<V>)
    + {static} SqlTimeSeriesSource<? extends Value> createSource(SqlConnector, String, DatabaseNamingStrategy, IndividualTimeSeriesMetaInformation, String)
    + {static} SqlTimeSeriesSource<T> create(SqlConnector, String, DatabaseNamingStrategy, UUID, Class<T>, String)
}

interface TimeSeriesMetaInformationSource {
    - {abstract} Map<UUID, IndividualTimeSeriesMetaInformation> getTimeSeriesMetaInformation()
    - {abstract} Optional<IndividualTimeSeriesMetaInformation> getTimeSeriesMetaInformation(UUID)
}

TimeSeriesMetaInformationSource <|.. CsvTimeSeriesMetaInformationSource
TimeSeriesMetaInformationSource <|.. SqlTimeSeriesMetaInformationSource

class CsvTimeSeriesMetaInformationSource {
    - CsvDataSource dataSource
    - Map<UUID, CsvIndividualTimeSeriesMetaInformation> timeSeriesMetaInformation
    - CsvTimeSeriesMetaInformationSource(String, String, FileNamingStrategy)
}

class SqlTimeSeriesMetaInformationSource {
    - DatabaseNamingStrategy namingStrategy
    - Map<UUID, IndividualTimeSeriesMetaInformation> mapping
    - SqlDataSource dataSource
    - SqlTimeSeriesMetaInformationSource(SqlConnector, String, DatabaseNamingStrategy)
}






interface IdCoordinateSource {
    {abstract} Optional<Point> getCoordinate(int)
    {abstract} Collection<Point> getCoordinates(int...)
    {abstract} Optional<Integer> getId(Point)
    {abstract} Collection<Point> getAllCoordinates()
    {abstract} List<CoordinateDistance> getNearestCoordinates(Point, int)
    {abstract} List<CoordinateDistance> getClosestCoordinates(Point, int, ComparableQuantity<Length>)
}

IdCoordinateSource <|.. CsvIdCoordinateSource
IdCoordinateSource <|.. SqlIdCoordinateSource

class CsvIdCoordinateSource {
    - Map<Integer, Point> idToCoordinate
    - Map<Point, Integer> coordinateToId
    - CsvDataSource dataSource
    - IdCoordinateFactory factory
    - CsvIdCoordinateSource(IdCoordinateFactory, CsvDataSource)
}

class SqlIdCoordinateSource {
    - SqlDataSource dataSource
    - SqlIdCoordinateFactory factory
    - SqlIdCoordinateSource(SqlIdCoordinateFactory, String, SqlDataSource)
}

interface DataConnector {
    {abstract} shutdown()
}

Class CsvFileConnector {
    - Map<Class<? extends UniqueEntity>, BufferedCsvWriter> entityWriters
    - Map<UUID, BufferedCsvWriter> timeSeriesWriters
    - EntityPersistenceNamingStrategy entityPersistenceNamingStrategy
    - String baseDirectoryName
    - {static} String FILE_ENDING
    + CsvFileConnector(String, EntityPersistenceNamingStrategy)
    + BufferedCsvWriter getOrInitWriter(Class<? extends UniqueEntity>, String[], String)
    + BufferedCsvWriter getOrInitWriter(T, String[], String)
    + BufferedCsvWriter initWriter(String, CsvFileDefinition)
    + BufferedReader initReader(Class<? extends UniqueEntity>)
    - CsvFileDefinition buildFileDefinition(T, String[], String)
    - CsvFileDefinition buildFileDefinition(Class<? extends UniqueEntity>, String[], String)
}
DataConnector <|.. CsvFileConnector
@enduml