/* JReleaser Maven Central Publishing Configuration - Portal OSSRH Staging API */

// Ensure we have the necessary publishing tasks
tasks.register("sourcesJar", Jar) {
  archiveClassifier.set("sources")
  from sourceSets.main.allJava
}

tasks.register("javadocJar", Jar) {
  dependsOn tasks.named("javadoc", Javadoc)
  archiveClassifier.set("javadoc")
  from { tasks.named("javadoc", Javadoc).get().destinationDir }
}

tasks.register('ensureStagingDirectory') {
  doFirst {
    // Create the staging directory if it doesn't exist
    def stagingDir = layout.buildDirectory.dir('staging-deploy').get().asFile
    stagingDir.mkdirs()
    println "Staging directory created: ${stagingDir.path}"
  }
}

// Configure publishing
publishing {
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar

      pom {
        name = 'Power System Data Model'
        description = 'Elaborated data model to model energy systems with a high granularity @ the Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3) @ TU Dortmund University'
        url = 'https://github.com/ie3-institute/PowerSystemDataModel'
        inceptionYear = '2021'

        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://github.com/ie3-institute/PowerSystemDataModel/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            organization = "Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3)/TU Dortmund University"
            organizationUrl = "https://ie3.etit.tu-dortmund.de"
          }
        }

        scm {
          connection = 'scm:git:https://github.com/ie3-institute/PowerSystemDataModel.git'
          developerConnection = 'scm:git:ssh://github.com/ie3-institute/PowerSystemDataModel.git'
          url = 'https://github.com/ie3-institute/PowerSystemDataModel'
        }
      }
    }
  }

  repositories {
    maven {
      url = layout.buildDirectory.dir('staging-deploy')
    }
  }
}

jreleaser {
  project {
    links {
      homepage = 'https://github.com/ie3-institute/PowerSystemDataModel'
    }
  }

  release {
    github {
      enabled = false
    }
  }

  signing {
    active = 'ALWAYS'
    armored = true
    // Use environment variables for signing configuration
    publicKey = System.getenv('ORG_GRADLE_PROJECT_publicKey') ?: (project.hasProperty('publicKey') ? project.property('publicKey') : null)
    secretKey  = System.getenv('ORG_GRADLE_PROJECT_signingKey') ?: (project.hasProperty('signingKey') ? project.property('signingKey') : null)
    passphrase = System.getenv('ORG_GRADLE_PROJECT_signingPassword') ?: (project.hasProperty('signingPassword') ? project.property('signingPassword') : null)
  }

  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = 'ALWAYS'
          url = 'https://central.sonatype.com/api/v1/publisher/upload'
          publishingType = 'user_managed'
          stagingRepository(layout.buildDirectory.dir('staging-deploy').get().asFile.path)
          // Credentials from environment variables
          username = System.getenv('ORG_GRADLE_PROJECT_user') ?: (project.hasProperty('user') ? project.property('user') : null)
          password = System.getenv('ORG_GRADLE_PROJECT_password') ?: (project.hasProperty('password') ? project.property('password') : null)
        }
      }
    }
  }
}

tasks.register('listStagingFiles') {
  description = 'List all files in the staging directory'
  group = 'publishing'

  doLast {
    def buildDir = layout.buildDirectory.get().asFile

    println "Listing all directories within the build directory (${buildDir.path}):"

    if (buildDir.exists()) {
      buildDir.listFiles().findAll { it.isDirectory() }.each { dir ->
        println "- ${dir.name}"
      }
    } else {
      println "Build directory does not exist."
    }

    println "\nStarting to list files in staging directory..."

    def stagingDir = layout.buildDirectory.dir('staging-deploy').get().asFile

    if (stagingDir.exists() && stagingDir.isDirectory()) {
      println "Files in staging directory (${stagingDir.absolutePath}):"
      stagingDir.eachFile { file ->
        println "- ${file.name}"
      }
    } else {
      println "Staging directory does not exist or is not a directory."
    }
    println "Finished listing files."
  }
}

// Task to publish to Maven Central using JReleaser with Portal API
tasks.register('publishToMavenCentral') {
  description = 'Publish to Maven Central using JReleaser Portal OSSRH Staging API'
  group = 'publishing'
  dependsOn 'clean', 'build', 'ensureStagingDirectory', 'publish'
}

// Helper task to verify JReleaser configuration without secrets (for local testing)
tasks.register('jreleaserCheckLocal') {
  description = 'Verify JReleaser configuration without requiring secrets'
  group = 'publishing'
  doLast {
    println "JReleaser configuration check (local mode) - Portal OSSRH Staging API"
    println "- Publication configured: ${publishing.publications.maven != null}"
    println "- Sources jar task: ${tasks.findByName('sourcesJar') != null}"
    println "- Javadoc jar task: ${tasks.findByName('javadocJar') != null}"
    println "- Staging directory: ${layout.buildDirectory.dir('staging-deploy').get().asFile.path}"
    println "- Publishing type: user_managed"
    println ""
    println "For full validation with secrets, run 'jreleaserCheck' in CI/CD environment"
  }
}

// Helper task to stage artifacts locally
tasks.register('stageArtifacts') {
  description = 'Stage artifacts for publishing'
  group = 'publishing'
  dependsOn 'publish'
}

// Update the CI deployment task for Portal API
tasks.register('deployToMavenCentral') {
  description = 'Deploy to Maven Central using Portal OSSRH Staging API (for CI)'
  group = 'publishing'
  dependsOn 'clean', 'build', 'publish'

  doLast {
    println "Deployment will use Portal OSSRH Staging API with user_managed publishing type"
    println "After deployment, visit https://central.sonatype.com/publishing to manage the release"
  }
}