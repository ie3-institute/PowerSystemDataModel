tasks.register("generatePomFileForMavenJavaPublication") {
  destination = layout.buildDirectory.file("generated-pom.xml").get().asFile
}

tasks.register('uploadToCentralPortal') {
  group = 'publishing'
  description = 'Upload artifacts to Maven Central Portal for manual approval'

  dependsOn "generatePomFileForMavenJavaPublication"

  doLast {
    def username = System.getenv('ORG_GRADLE_PROJECT_user')
    def password = System.getenv('ORG_GRADLE_PROJECT_password')
    def deployVersion = project.findProperty('deployVersion') ?: project.version

    if (!username || !password) {
      throw new GradleException("Sonatype credentials not found. Set sonatypeUser and sonatypePassword properties or environment variables.")
    }

    // Create bundle directory
    def bundleDir = layout.buildDirectory.dir("central-portal-bundle").get().asFile
    def artifactPath = "${group.toString().replace('.', '/')}/${project.name}/${deployVersion}"
    def bundleArtifactDir = new File(bundleDir, artifactPath)

    bundleDir.deleteDir()
    bundleArtifactDir.mkdirs()

    // Copy artifacts from build/libs using the correct filename
    def localJarPath = file("${layout.buildDirectory}/libs/${project.name}-${deployVersion}.jar")

    if (!localJarPath.exists()) {
      throw new GradleException("Artifacts not found in build/libs: ${localJarPath}")
    }

    copy {
      from localJarPath
      into bundleArtifactDir
    }

    // Copy generated POM file into the bundle directory
    copy {
      from layout.buildDirectory.file("generated-pom.xml")
      into bundleArtifactDir  // Include generated POM in the bundle
    }

    // Create tar.gz bundle including both JAR and POM files
    def bundleFile = layout.buildDirectory.file("${project.name}-${deployVersion}-bundle.tar.gz").get().asFile

    exec {
      workingDir bundleDir
      commandLine 'tar', '-czf', bundleFile.absolutePath, '.'
    }

    println "Created bundle: ${bundleFile}"
    println "Bundle size: ${bundleFile.length()} bytes"


    // Upload via curl
    def uploadResult = exec {
      ignoreExitValue true
      commandLine 'curl', '-s', '-w', '\n%{http_code}',
          '-X', 'POST',
          '-H', 'Content-Type: multipart/form-data',
          '-F', "bundle=@${bundleFile.absolutePath}",
          '-F', 'publishingType=USER_MANAGED',
          '-u', "${username}:${password}",
          'https://central.sonatype.com/api/v1/publisher/upload'
    }

    if (uploadResult.exitValue == 0) {
      println "âœ“ Upload successful!"
      println "Check status at: https://central.sonatype.com/publishing/deployments"
    } else {
      throw new GradleException("Upload failed")
    }
  }
}