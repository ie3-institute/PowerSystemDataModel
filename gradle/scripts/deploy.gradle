tasks.register('uploadToCentralPortal') {
  group = 'publishing'
  description = 'Upload artifacts to Maven Central Portal for manual approval'

  doLast {
    def username = System.getenv('ORG_GRADLE_PROJECT_user')
    def password = System.getenv('ORG_GRADLE_PROJECT_password')
    def deployVersion = project.findProperty('deployVersion') ?: project.version

    if (!username || !password) {
      throw new GradleException("Sonatype credentials not found. Set sonatypeUser and sonatypePassword properties or environment variables.")
    }

    // Create bundle directory
    def bundleDir = layout.buildDirectory.dir("central-portal-bundle").get().asFile
    def artifactPath = "${group.toString().replace('.', '/')}/${project.name}/${deployVersion}"
    def bundleArtifactDir = new File(bundleDir, artifactPath)

    // Clean and create the bundle directory
    bundleDir.deleteDir()
    bundleArtifactDir.mkdirs()

    // Copy artifacts from build/libs using the correct filename
    def localJarPath = file("${layout.buildDirectory}/libs/${project.name}-${deployVersion}.jar")

    if (!localJarPath.exists()) {
      throw new GradleException("Artifacts not found in build/libs: ${localJarPath}")
    }

    copy {
      from localJarPath
      into bundleArtifactDir
    }

    def pomFile = new File(bundleArtifactDir, "${project.name}-${deployVersion}.pom")
    pomFile.text = """
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>${group}</groupId>
    <artifactId>${project.name}</artifactId>
    <version>${deployVersion}</version>
    
    <description>Elaborated data model to model energy systems with a high granularity @ the Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3) @ TU Dortmund University</description>
    
    <url>https://github.com/ie3-institute/PowerSystemDataModel</url>

    <licenses>
      <license>
          <name>BSD 3-Clause License</name>
          <url>https://github.com/ie3-institute/PowerSystemDataModel/blob/master/LICENSE</url>
      </license>
    </licenses>
    
    <issueManagement>
    <system>Github</system>
    <url>https://github.com/ie3-institute/PowerSystemDataModel/issues</url>
  </issueManagement>
    <developers>
      <developer>
          <organization>Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3)/TU Dortmund University</organization>
      <organizationUrl>https://ie3.etit.tu-dortmund.de</organizationUrl>
      </developer>
    </developers>
    
      <scm>
    <connection>scm:git:git:github.com/ie3-institute/PowerSystemDataModel.git</connection>
    <developerConnection>scm:git:ssh:github.com:ie3-institute/PowerSystemDataModel.git</developerConnection>
    <tag>HEAD</tag>
    <url>https://github.com/ie3-institute/PowerSystemDataModel</url>
  </scm>
</project>
"""

    println "Created POM: ${pomFile}"

    // Create tar.gz bundle including both JAR and POM files
    def bundleFile = layout.buildDirectory.file("${project.name}-${deployVersion}-bundle.tar.gz").get().asFile

    exec {
      workingDir(bundleDir)
      commandLine 'tar', '-czf', bundleFile.absolutePath, '.'
    }

    println "Created bundle: ${bundleFile}"
    println "Bundle size: ${bundleFile.length()} bytes"

    // Upload via curl including both JAR and POM files
    def uploadResult = exec {
      ignoreExitValue true
      commandLine 'curl', '-s', '-w', '\n%{http_code}',
          '-X', 'POST',
          '-H', 'Content-Type: multipart/form-data',
          '-F', "bundle=@${bundleFile.absolutePath}",
          '-F', 'publishingType=USER_MANAGED',
          '-u', "${username}:${password}",
          'https://central.sonatype.com/api/v1/publisher/upload'
    }

    if (uploadResult.exitValue == 0) {
      println "âœ“ Upload successful!"
      println "Check status at: https://central.sonatype.com/publishing/deployments"
    } else {
      throw new GradleException("Upload failed")
    }
  }
}