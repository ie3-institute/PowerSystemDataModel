// Add this to your build.gradle file


tasks.register('uploadToCentralPortal') {
  group = 'publishing'
  description = 'Upload artifacts to Maven Central Portal manually'

  doLast {
    def username = project.findProperty('sonatypeUser') ?: System.getenv('SONATYPE_USERNAME')
    def password = project.findProperty('sonatypePassword') ?: System.getenv('SONATYPE_PASSWORD')
    def deployVersion = project.findProperty('deployVersion') ?: project.version

    if (!username || !password) {
      throw new GradleException("Sonatype credentials not found. Set sonatypeUser and sonatypePassword properties or environment variables.")
    }

    // Create bundle directory
    def bundleDir = layout.buildDirectory.dir("central-portal-bundle").get().asFile
    def artifactPath = "${group.toString().replace('.', '/')}/${project.name}/${deployVersion}"
    def bundleArtifactDir = new File(bundleDir, artifactPath)

    bundleDir.deleteDir()
    bundleArtifactDir.mkdirs()

    // Copy artifacts from build/libs using the correct filename
    def localJarPath = file("${buildDir}/libs/${project.name}-${deployVersion}.jar")

    if (!localJarPath.exists()) {
      throw new GradleException("Artifacts not found in build/libs: ${localJarPath}")
    }

    copy {
      from localJarPath
      into bundleArtifactDir
    }

    // Create tar.gz bundle
    def bundleFile = layout.buildDirectory.file("${project.name}-${deployVersion}-bundle.tar.gz").get().asFile

    exec {
      workingDir bundleDir
      commandLine 'tar', '-czf', bundleFile.absolutePath, '.'
    }

    println "Created bundle: ${bundleFile}"
    println "Bundle size: ${bundleFile.length()} bytes"


    // Upload via curl
    def uploadResult = exec {
      ignoreExitValue true
      commandLine 'curl', '-s', '-w', '\n%{http_code}',
          '-X', 'POST',
          '-H', 'Content-Type: multipart/form-data',
          '-F', "bundle=@${bundleFile.absolutePath}",
          '-F', 'publishingType=USER_MANAGED',
          '-u', "${username}:${password}",
          'https://central.sonatype.com/api/v1/publisher/upload'
    }

    if (uploadResult.exitValue == 0) {
      println "✓ Upload successful!"
      println "Check status at: https://central.sonatype.com/publishing/deployments"
    } else {
      throw new GradleException("Upload failed")
    }
  }
}


// Alternative task using pure Gradle/Groovy (no curl dependency)
tasks.register('uploadToCentralPortalPure') {
  group = 'publishing'
  description = 'Upload artifacts to Maven Central Portal using pure Gradle'

  doLast {
    def username = project.findProperty('sonatypeUser') ?: System.getenv('SONATYPE_USERNAME')
    def password = project.findProperty('sonatypePassword') ?: System.getenv('SONATYPE_PASSWORD')
    def deployVersion = project.findProperty('deployVersion') ?: project.version

    if (!username || !password) {
      throw new GradleException("Sonatype credentials not found.")
    }

    // Create bundle
    def bundleDir = layout.buildDirectory.dir("central-portal-bundle").get().asFile
    def artifactPath = "${group.toString().replace('.', '/')}/${project.name}/${deployVersion}"
    def bundleArtifactDir = new File(bundleDir, artifactPath)

    bundleDir.deleteDir()
    bundleArtifactDir.mkdirs()

    // Copy artifacts
    def localMavenPath = new File(System.getProperty('user.home'), ".m2/repository/${artifactPath}")

    copy {
      from localMavenPath
      into bundleArtifactDir
    }

    // Create tar.gz
    def bundleFile = layout.buildDirectory.file("${project.name}-${deployVersion}-bundle.tar.gz").get().asFile

    ant.tar(destfile: bundleFile.absolutePath, compression: 'gzip') {
      fileset(dir: bundleDir)
    }

    // HTTP Upload using Groovy
    def url = new URL('https://central.sonatype.com/api/v1/publisher/upload')
    def connection = url.openConnection() as HttpURLConnection

    connection.setRequestMethod('POST')
    connection.setDoOutput(true)
    connection.setRequestProperty('Authorization',
        'Basic ' + ("${username}:${password}".bytes.encodeBase64().toString()))

    def boundary = "----formdata-gradle-${System.currentTimeMillis()}"
    connection.setRequestProperty('Content-Type', "multipart/form-data; boundary=${boundary}")

    connection.outputStream.withWriter { writer ->
      // Publishing type parameter
      writer.println("--${boundary}")
      writer.println("Content-Disposition: form-data; name=\"publishingType\"")
      writer.println()
      writer.println("USER_MANAGED")

      // Bundle file
      writer.println("--${boundary}")
      writer.println("Content-Disposition: form-data; name=\"bundle\"; filename=\"${bundleFile.name}\"")
      writer.println("Content-Type: application/gzip")
      writer.println()
      writer.flush()

      // Copy file content
      bundleFile.withInputStream { input ->
        connection.outputStream << input
      }

      writer.println()
      writer.println("--${boundary}--")
    }

    def responseCode = connection.responseCode
    def response = responseCode < 400 ? connection.inputStream.text : connection.errorStream.text

    println "Response Code: ${responseCode}"
    println "Response: ${response}"

    if (responseCode == 201) {
      println "✓ Upload successful!"
      println "Check status at: https://central.sonatype.com/publishing/deployments"
    } else {
      throw new GradleException("Upload failed with code ${responseCode}: ${response}")
    }
  }
}