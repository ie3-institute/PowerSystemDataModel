tasks.register("sourcesJar", Jar) {
  archiveClassifier.set("sources")
  from sourceSets.main.allJava
}

tasks.register("javadocJar", Jar) {
  dependsOn tasks.named("javadoc", Javadoc)
  archiveClassifier.set("javadoc")
  from { tasks.named("javadoc", Javadoc).get().destinationDir }
}

publishing {
  publications {
    create("mavenJava", MavenPublication) {
      versionMapping {
        usage('java-api') { fromResolutionOf('runtimeClasspath') }
        usage('java-runtime') { fromResolutionResult() }
      }

      pom {
        description = 'Elaborated data model to model energy systems with a high granularity @ the Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3) @ TU Dortmund University'
        name = 'Power System Data Model'
        url = 'https://github.com/ie3-institute/PowerSystemDataModel'

        organization {
          name = 'Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3)/TU Dortmund University'
          url = 'https://www.ie3.tu-dortmund.de/'
        }

        issueManagement {
          system = 'GitHub'
          url = 'https://github.com/ie3-institute/PowerSystemDataModel/issues'
        }

        licenses {
          license {
            name = 'BSD 3-Clause License'
            url = 'https://github.com/ie3-institute/PowerSystemDataModel/blob/master/LICENSE'
          }
        }

        developers {
          developer {
            organization = "Institute of Energy Systems, Energy Efficiency and Energy Economics (ie3)/TU Dortmund University"
            organizationUrl = "https://ie3.etit.tu-dortmund.de"
          }
        }

        scm {
          connection = 'scm:git:git://github.com/ie3-institute/PowerSystemDataModel.git'
          developerConnection = 'scm:git:ssh://github.com:ie3-institute/PowerSystemDataModel.git'
          url = 'https://github.com/ie3-institute/PowerSystemDataModel'
        }
      }

      removeTestDependenciesFromPom(pom)
      groupId = group
      artifactId = 'PowerSystemDataModel'
      version = project.findProperty('deployVersion') ?: project.version


      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
  }
}

// Signing configuration
signing {
  useInMemoryPgpKeys(
      findProperty('signingKey') as String,
      findProperty('signingPassword') as String
      )

  sign publishing.publications.mavenJava
}

def removeTestDependenciesFromPom(pom) {
  pom.withXml {
    def rootNode = asNode()
    rootNode.dependencies.removeAll { dep ->
      dep.scope == "test"
    }
  }
}

// Task for uploading to Maven Central Portal
tasks.register('uploadToMavenCentralPortal') {
  group = 'publishing'
  description = 'Upload artifacts to Maven Central Portal for manual approval'

  dependsOn publishMavenJavaPublicationToSonatypeRepository

  doLast {
    def username = System.getenv('ORG_GRADLE_PROJECT_user')
    def password = System.getenv('ORG_GRADLE_PROJECT_password')

    if (!username || !password) {
      throw new GradleException("Sonatype credentials not found.")
    }

    println "âœ“ Upload successful!"
    println "Check status at: https://central.sonatype.com/publishing/deployments"
  }
}